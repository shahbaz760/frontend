name: backend

on:
  push:
    branches:
      - master

permissions:
  id-token: write  
  contents: read

jobs:
    build:
        runs-on: ubuntu-latest    
        steps:
            - name: get_code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: arn:aws:iam::637527414831:role/github-oidc
                role-session-name: GitHubActionsSession
                aws-region: us-east-2  # Change to your AWS region

            # - name: Configure AWS CLI
            #   run: |
            #     aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            #     aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            #     aws configure set region ${{ secrets.AWS_REGION }}

            - env:
                ENV: ${{ secrets.BACKEND }}
              run: echo -e "$ENV">.env
            
            - name: Docker Cli login
              run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 637527414831.dkr.ecr.us-east-2.amazonaws.com

            - name: Build Docker Image
              run: docker build -t golu .

            - name: Tag and Push docker image to ECR
              run: |
                docker tag golu:latest 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest
                docker push 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest

                
             

    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Set up SSH key for EC2 access
              run: |
                    mkdir -p ~/.ssh
                    echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
                    chmod 600 ~/.ssh/id_rsa

            - name: SSH into EC2 and execute commands 
              run: |
                    ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
                    set -e
                    echo "Docker Login"
                    aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 637527414831.dkr.ecr.us-east-2.amazonaws.com
                    docker pull 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest
                    echo "pull done"
                    docker logout 
                    echo "removing older container"
                    docker rm -f golu-react-webapp
                    echo "done"
                    echo "Running New container"
                    sudo docker run -d --name golu-react-webapp -p 3000:3000 637527414831.dkr.ecr.us-east-2.amazonaws.com/golu:latest
                    echo "Done" 
                    docker system prune -a --force 
                    '

  
